from web3 import Web3
from web3.middleware import geth_poa_middleware
import json

url = "https://blockchain-cryptocasino-424ab58b30773f5a-eth.2022.ductf.dev/"
w3 = Web3(Web3.HTTPProvider(url))
w3.middleware_onion.inject(geth_poa_middleware, layer=0)
print("Is connected? ", w3.isConnected())

with open("ResolveCasino.json") as f:       #json file with the contract ABI
    triit = json.load(f)
with open("ResolveCasinoBytecode.json") as f:       #json file with the contract Bytecode
    bytecoD = json.load(f)

account_from = {
    'address': '0xFD391659e29b9eCB2b7c8AC9587eDff3E0ED2AC4',
    'private_key': '0x927c489ce4721190744b0946a6dbc276ce10f499d710d61dc83115c5a7a239df',
}
acct = w3.eth.account.privateKeyToAccount(account_from['private_key'])
print(f'Attempting to deploy from account: { account_from["address"] }')
Incrementer = w3.eth.contract(abi=triit, bytecode=bytecoD['object'])

construct_txn = Incrementer.constructor().buildTransaction({
    'from': account_from['address'],
    'nonce': w3.eth.getTransactionCount(account_from['address']),
    'gas': 1728712,
    'gasPrice': w3.toWei('21', 'gwei')
})

signed = acct.signTransaction(construct_txn)
tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)

tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

print(f'Contract deployed at address: { tx_receipt.contractAddress }')